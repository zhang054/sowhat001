#include"stdio.h"
#include"stdlib.h"

void InsertSort(int a[]);
void SelectSort(int a[]);
void BubbleSort(int a[]);
void ReBubbleSort(int a[],int length);
void QuickSort(int a[],int length);
int comp(const void*a,const void*b);
void MergeArray(int a[], int first, int mid, int last, int temp[]);
void MergeSort(int a[],int first,int last,int temp[]);
int main()
{
	int i;
	int a[10] = {6,4,8,7,9,10,5,3,1,2};
	int temp[10] = {0};
	//InsertSort(a);
	//SelectSort(a);
	//BubbleSort(a);
	//ReBubbleSort(a,10); 
	MergeSort(a,0,9,temp);
	//QuickSort(a,10);
	//qsort(a,10,sizeof(int),comp);
	for(i = 0;i < 10;i++)
	{
		printf("%d ",a[i]);
	}
}

int comp(const void*a,const void*b)
{
return *(int*)a-*(int*)b;
}

void Exchange(int *a,int *b)
{
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

void InsertSort(int a[])
{
	int i,j;
	for(i = 1;i < 10;i++)
	{
		for(j = i;j > 0;j--)
		{
			if(a[j]<a[j-1])
			{
				Exchange(&a[j],&a[j-1]);
			}
		}
	}//从第二个开始 发现之前有比它小的就与右边的一个交换 
}//average = O(n^2),worst = O(n^2),best = O(n)

void SelectSort(int a[])
{
	int i,j;
	for(i = 0;i<10;i++)
	{
		int index = i;
		for(j = i+1;j<10;j++)
		{
			if(a[j]<a[index])
			{
				index = j;
			}
		}
		if(index != i)
		{
			Exchange(&a[index],&a[i]);
		}
	}//假设第一个是最小的 然后从后面剩下的9个中选出最小的与第一个比较并交换or not 
}//average = best = worst = O(n^2)

void BubbleSort(int a[])
{
    int i, j, temp;
    for (i = 0;i < 10;i++)
    {
        for (j = 0;j < 9-i;j++)
        {
            if(a[j] > a[j+1])
            {
				Exchange(&a[j],&a[j+1]);
            }
        }
	}//每次循环都把最大的数推到最右边 
}//average = best = worst = O(n^2)

void ReBubbleSort(int a[],int length)
{
	int i,index = 0;	
	int max = a[0];
	if(length > 1)
	{
		for(i = 0;i < length;i++)
		{
			if(a[i] > max)
			{				
				max = a[i];
				index = i;
			}
		}
		Exchange(&a[index],&a[length-1]);
		ReBubbleSort(a,length-1);
	}
}

void MergeSort(int a[],int first,int last,int temp[])
{
	if(first < last)
	{
		int mid = (first + last)/2;
		MergeSort(a,first,mid,temp);
		MergeSort(a,mid+1,last,temp);
		MergeArray(a,first,mid,last,temp); 
	}
}//average = best = worst = O(nlog2n) 

void MergeArray(int a[], int first, int mid, int last, int temp[])  
{  
    int i = first,j = mid + 1;  
    int m = mid,n = last;  
    int k = 0;  
    while (i <= mid && j <= last)  
    {  
        if (a[i] <= a[j])  
            temp[k++] = a[i++];  
        else  
            temp[k++] = a[j++];  
    }   
    while (i <= m)  
    {
        temp[k++] = a[i++];  
	}
    while (j <= n)  
    {
		temp[k++] = a[j++];  
	}
    for (i = 0; i < k; i++)  
    {
		a[first + i] = temp[i]; 
	}
} 
 
void QuickSort(int a[],int length)
{
	if(length > 1)
	{
		int *less = (int*)malloc(length*sizeof(int));
		int *great = (int*)malloc(length*sizeof(int));
		int seed = a[length/2];
		int i,lesscnt = 0,greatcnt = 0;
		for(i = 0;i < length;i++)
		{
			if(a[i]<seed)
			{
				less[lesscnt++] = a[i];
			}
			else if(a[i]>seed)
			{
				great[greatcnt++] = a[i];
			}
		}
		QuickSort(less,lesscnt);
		QuickSort(great,greatcnt);
		for(i = 0;i<lesscnt;i++)
		{
			a[i] = less[i];
		}
		a[lesscnt] = seed;
		for(i = 0;i<greatcnt;i++)
		{
			a[i+lesscnt+1] = great[i];
		}
		free(less);
		free(great);
	}
}//average = best = O(nlog2n),worst = O(n^2)

//void qsort(void *base,int nelem,int width,int (*fcmp)(const void *,const void *));
//应用:qsort(a,1000,sizeof(int),comp);
//int comp(const void*a,const void*b)
//{
//return *(int*)a-*(int*)b;
//}//从小到大排序 
// a,b对换则是从大到小排序 
